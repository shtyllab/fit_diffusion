%\documentclass{tufte-handout}
\documentclass{article}

%\geometry{showframe}% for debugging purposes -- displays the margins

%\usepackage{amsmath}
%\usepackage{natbib}
%\bibfont{\small} % Doesn't see to work...

% Set up the images/graphics package
%\usepackage{graphicx}
%\setkeys{Gin}{width=\linewidth,totalheight=\textheight,keepaspectratio}
% \graphicspath{{graphics/}}

\title{Modeling Advection and Diffuions %\thanks{}
}
\author[Marc Los Huertos]{Marc Los Huertos}
\date{}  % if the \date{} command is left out, the current date will be used


% \SweaveOpts{prefix.string=graphics/plot} % Created a "graphics" subdirectory to 

%\setsidenotefont{\color{blue}}
% \setcaptionfont{hfont commandsi}
% \setmarginnotefont{\color{blue}}
% \setcitationfont{\color{gray}}

% The following package makes prettier tables.  We're all about the bling!
%\usepackage{booktabs}

% Small sections of multiple columns
%\usepackage{multicol}

% These commands are used to pretty-print LaTeX commands
% command name -- adds backslash automatically

%\usepackage{Sweave}
\begin{document}
\SweaveOpts{concordance=TRUE}

\maketitle% this prints the handout title, author, and date

%\begin{abstract}
\noindent The movement of compounds in the environment is driven by two processes, advection and diffusion. Of course, these processes occur in three dimensions, but for this class we'll begin with one dimensional processes before getting to more complecated examples.\sidenote{Typeset using the Sweave function in R and \LaTeX\ using a \citet{Tufte:1983, Tufte:1997} and style.}
%\end{abstract}

%\printclassoptions

% Setting up the margins, etc for R

\section{Session Outcomes}
\begin{enumerate}
	\item Describe Advection Mathematically
	\item Analyze 1-dimensional movement using advection equations
	\item Describe Diffuions mathematically
	\item Analyze 1-dimensional movement using fick's law.
	\item Two dimensional analysis of advention
\end{enumerate}

\section{Material Transport}




\section{R as a Calculator}


2.4. Steady-state solution of 2-D PDEs

Function steady.2D effciently nds the steady-state of 2-dimensional problems.
Karline Soetaert 13
In the following model
@C
@t
= Dx 
@2C
@x2 + Dy 
@2C
@y2
.. r  C2 + pxy
a substance C is consumed at a quadratic rate (r C2), while dispersing in X- and Y-direction.
At certain positions (x,y) the substance is produced (rate p).
The model is solved on a square (100*100) grid. There are zero-
ux boundary conditions at
the 4 boundaries.
The term Dx  @2C
@x2 is in fact shorthand for:
..
@Flux
@x
where
Flux = ..Dx 
@C
@x
i.e. it is the negative of the 
ux gradient, where the 
ux is due to diusion.
In the numerical approximation fo the 
ux, the concentration gradient is approximated as the
subtraction of two matrices, with the columns or rows shifted (e.g. Conc[2:n,]-Conc[1:(n-1),]).
The 
ux gradient is then also approximated by subtracting entire matrices
(e.g. Flux[2:(n+1),]-Flux[1:(n),]). This is very fast. The zero-
ux at the boundaries is
imposed by binding a column or row with 0-s.


<<2D function >>=
diffusion2D <- function(t,conc,par){
Conc <- matrix(nr=n,nc=n,data=conc) # vector to 2-D matrix
dConc <- -r*Conc*Conc # consumption
BND <- rep(1,n) # boundary concentration

# constant production in certain cells
dConc[ii]<- dConc[ii]+ p

#diffusion in X-direction; boundaries=imposed concentration

Flux <- -Dx * rbind(rep(0,n),(Conc[2:n,]-Conc[1:(n-1),]),rep(0,n))/dx
dConc <- dConc - (Flux[2:(n+1),]-Flux[1:n,])/dx

#diffusion in Y-direction
Flux <- -Dy * cbind(rep(0,n),(Conc[,2:n]-Conc[,1:(n-1)]),rep(0,n))/dy
dConc <- dConc - (Flux[,2:(n+1)]-Flux[,1:n])/dy

return(list(as.vector(dConc)))
}

@

After specifying the values of the parameters, 10 cells on the 2-D grid where there will be
substance produced are randomly selected (ii).

14 Package rootSolve : roots, gradients and steady-states in R
0.0 0.2 0.4 0.6 0.8 1.0
0.0 0.2 0.4 0.6 0.8 1.0
2-D diffusion+production
x
y
Figure 5: Steady-state solution of the nonlinear 2-Dimensional model
<<label=parameters>>=
# parameters
dy <- dx <- 1 # grid size
Dy <- Dx <- 1.5 # diffusion coeff, X- and Y-direction
r <- 0.01 # 2-nd-order consumption rate (/time)
p <- 20 # 0-th order production rate (CONC/t)
n <- 100
# 10 random cells where substance is produced at rate p
ii <- trunc(cbind(runif(10)*n+1,runif(10)*n+1))

@
The steady-state is found using function steady.2D. It takes as arguments a.o. the dimensionality
of the problem (dimens) and lrw=1000000, the length of the work array needed by
the solver. If this value is set too small, the solver will return with the size needed.
It takes about 0.5 second to solve this 10000 state variable model.

<< label = Steady2D>>=
Conc0 <- matrix(nr=n,nc=n,10.)
# print(system.time(
# not working yet...

#ST3 <- steady.2D(Conc0,func=diffusion2D,parms=NULL,pos=TRUE,dimens=c(n,n), lrw=1000000,atol=1e-10,rtol=1e-10,ctol=1e-1)))

@
user system elapsed
1.044 0.032 1.076
The S3 image method is used to generate the steady-state plot.

<< label=CreateImage >>=
#image(ST3,main="2-D diffusion+production", xlab="x", ylab="y")
@

\end{document}